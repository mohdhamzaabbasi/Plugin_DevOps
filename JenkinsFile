/*
===========================================================================================
JENKINSFILE DOCUMENTATION: POST-BUILD DATA EXTRACTION AND SECURE WEBHOOK INTEGRATION
===========================================================================================

This Jenkinsfile post block is designed to securely capture, process, and transmit detailed
build metadata, stage-level information, node execution details, test reports, and SonarQube
code coverage metrics to an external webhook endpoint for further analysis or visualization.

-------------------------------------------------------------------------------------------
FUNCTIONALITY OVERVIEW:
-------------------------------------------------------------------------------------------
1️⃣ Credentials Handling:
    - Uses Jenkins credentials for secure access to API tokens, secret keys, and SonarQube token.
    - The following credentials are required:
        • jenkins-username
        • api-token
        • secret-key (AES encryption key)
        • iv-key (AES initialization vector)
        • sonarqube-token

2️⃣ Data Extraction:
    - Fetches build metadata using the Jenkins API.
    - Captures detailed stage and node-level data using wfapi and execution endpoints.
    - Collects test report results from the Jenkins testReport API.
    - Retrieves SonarQube code coverage metrics via SonarQube REST API.

3️⃣ Data Processing:
    - Aggregates build, stage, node, test, and SonarQube data into a single JSON payload.
    - Writes the JSON payload to a file (`payload.json`).

4️⃣ Data Integrity and Security:
    - Generates SHA256 checksum of the payload for tamper detection.
    - Generates an encrypted timestamp using AES-256-CBC encryption (with base64 encoding) to
      protect against replay attacks.

5️⃣ Data Transmission:
    - Sends the payload to a specified external webhook URL using a secure HTTP POST request.
    - Includes the encrypted timestamp and checksum in the HTTP headers for validation.

-------------------------------------------------------------------------------------------
IMPORTANT NOTES:
-------------------------------------------------------------------------------------------
✅ Ensure the WEBHOOK_URL and SonarQube server/project details are correctly configured.
✅ Ensure the required credentials are added in Jenkins and accessible to this pipeline.
✅ The SonarQube API call requires a valid SonarQube server URL and project key.
✅ The openssl command requires that the secret key and IV key be valid 256-bit and 128-bit values respectively.

-------------------------------------------------------------------------------------------
USAGE:
-------------------------------------------------------------------------------------------
- This post block runs in the `always` condition, meaning it executes after *every* build,
  regardless of success or failure.
- Suitable for pipelines requiring detailed audit logs, compliance validation, or integration
  with external monitoring systems.

===========================================================================================
*/


post {
    always {
        script {
            withCredentials([
                string(credentialsId: 'jenkins-username', variable: 'JENKINS_USERNAME'),
                string(credentialsId: 'api-token', variable: 'API_TOKEN'),
                string(credentialsId: 'secret-key', variable: 'SECRET_KEY'),
                string(credentialsId: 'iv-key', variable: 'IV_KEY'),
                string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')
            ]) {
                
                def WEBHOOK_URL = ''
                def getRawJson = { url ->
                    sh(script: "curl -s -u '$JENKINS_USERNAME:$API_TOKEN' '${url}'", returnStdout: true).trim()
                }

                def buildData = getRawJson("${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/api/json")
                def stageDescribe = getRawJson("${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/wfapi/describe")
                def testResult = getRawJson("${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/testReport/api/json")
                
                def sonarqubeResult = sh(
                    script: "curl -s -u \"$SONAR_TOKEN:\" \"<SonarQube_Server>/api/measures/component?component=<Project_Key>&metricKeys=coverage\"",
                    returnStdout: true
                ).trim()
                
                // ✅ Parse JSON with readJSON
                writeFile file: 'stageDescribe.json', text: stageDescribe
                def parsedDescribe = readJSON file: 'stageDescribe.json'

                def nodeStageDataStr = parsedDescribe.stages.collect { stage ->
                    def nodeId = stage.id
                    def nodeData = getRawJson("${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/execution/node/${nodeId}/wfapi/describe")
                    return """{"nodeId":${groovy.json.JsonOutput.toJson(nodeId)},"data":${nodeData}}"""
                }.join(',')

                def payloadStr = """{"build_data": ${buildData}, "stage_data": [${stageDescribe}],"node_stage_data": [${nodeStageDataStr}], "test_data": ${testResult}, "sonar_data": ${sonarqubeResult}}"""
                writeFile file: 'payload.json', text: payloadStr

                def checksum = sh(script: "sha256sum payload.json | awk '{print \$1}'", returnStdout: true).trim()

                def timestamp = System.currentTimeMillis().toString()
                def encryptedTimestamp = sh(script: """
                    echo -n '${timestamp}' | openssl enc -aes-256-cbc -base64 \\
                    -K \$(echo -n '${SECRET_KEY}' | xxd -p | tr -d '\\n') \\
                    -iv \$(echo -n '${IV_KEY}' | xxd -p | tr -d '\\n')
                """, returnStdout: true).trim()
            
                sh """
                    curl -X POST '${WEBHOOK_URL}' \\
                    -H "Content-Type: application/json" \\
                    -H "X-Encrypted-Timestamp: ${encryptedTimestamp}" \\
                    -H "X-Checksum: ${checksum}" \\
                    --data-binary @payload.json
                """
            }
        }
    }
}